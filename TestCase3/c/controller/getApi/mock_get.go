// Code generated by MockGen. DO NOT EDIT.
// Source: get.go

// Package getapi is a generated GoMock package.
package getapi

import (
	models "eratani/TestCase3/c/storage/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResultServices is a mock of ResultServices interface.
type MockResultServices struct {
	ctrl     *gomock.Controller
	recorder *MockResultServicesMockRecorder
}

// MockResultServicesMockRecorder is the mock recorder for MockResultServices.
type MockResultServicesMockRecorder struct {
	mock *MockResultServices
}

// NewMockResultServices creates a new mock instance.
func NewMockResultServices(ctrl *gomock.Controller) *MockResultServices {
	mock := &MockResultServices{ctrl: ctrl}
	mock.recorder = &MockResultServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultServices) EXPECT() *MockResultServicesMockRecorder {
	return m.recorder
}

// LogicServices mocks base method.
func (m *MockResultServices) LogicServices(req models.RequestData) (models.ResponseServices, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicServices", req)
	ret0, _ := ret[0].(models.ResponseServices)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LogicServices indicates an expected call of LogicServices.
func (mr *MockResultServicesMockRecorder) LogicServices(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicServices", reflect.TypeOf((*MockResultServices)(nil).LogicServices), req)
}
