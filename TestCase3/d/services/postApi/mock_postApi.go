// Code generated by MockGen. DO NOT EDIT.
// Source: postApi.go

// Package postapi is a generated GoMock package.
package postapi

import (
	models "eratani/TestCase3/d/storage/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockResultQueryInsert is a mock of ResultQueryInsert interface.
type MockResultQueryInsert struct {
	ctrl     *gomock.Controller
	recorder *MockResultQueryInsertMockRecorder
}

// MockResultQueryInsertMockRecorder is the mock recorder for MockResultQueryInsert.
type MockResultQueryInsertMockRecorder struct {
	mock *MockResultQueryInsert
}

// NewMockResultQueryInsert creates a new mock instance.
func NewMockResultQueryInsert(ctrl *gomock.Controller) *MockResultQueryInsert {
	mock := &MockResultQueryInsert{ctrl: ctrl}
	mock.recorder = &MockResultQueryInsertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResultQueryInsert) EXPECT() *MockResultQueryInsertMockRecorder {
	return m.recorder
}

// PostData mocks base method.
func (m *MockResultQueryInsert) PostData(req models.RequestPost) (models.ResponsePost, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostData", req)
	ret0, _ := ret[0].(models.ResponsePost)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostData indicates an expected call of PostData.
func (mr *MockResultQueryInsertMockRecorder) PostData(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostData", reflect.TypeOf((*MockResultQueryInsert)(nil).PostData), req)
}
